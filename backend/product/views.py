from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from django.db.models import Q
from .models import *
from user.models import *
from product.serializers import CategorySerializer, ProductSerializer, CartSerializer

from django.http import Http404
imageNotFoundString = 'data:image/jpg;base64,' \
                      '/9j/4AAQSkZJRgABAQAASABIAAD' \
                      ' '


class CategoryList(APIView):
    """
    list all category, create a category
    """

    def get(self, request, format=None):
        categories = Category.objects.all()
        serializer = CategorySerializer(categories, many=True)
        return Response(serializer.data)

    def post(self, request, format=None):
        category = request.data
        serializer = CategorySerializer(data=category)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        else:
            return Response({'msg': 'save failure'})


class CategoryDetail(APIView):
    """
    Create, modify or delete a category
    """

    def get_object(self, pk):
        try:
            return Category.objects.get(pk=pk)
        except Category.DoesNotExist:
            raise Http404

    def get(self, request, pk, format=None):
        category = self.get_object(pk)
        serializer = CategorySerializer(category)
        return Response(serializer.data)

    def put(self, request, pk, format=None):
        category = self.get_object(pk)
        serializer = CategorySerializer(instance=category, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, pk, format=None):
        category = self.get_object(pk)
        category.delete()
        info = {'info': 'delete success'}
        return Response(info, status=status.HTTP_204_NO_CONTENT)


class ProductList(APIView):
    """
    list all products
    """

    def get(self, request, format=None):
        products = Product.objects.all()
        print(type(products))
        print(len(products))
        newProduct = []
        for product in products:
            print(product)
            newProduct.append(product)
        serializer = ProductSerializer(newProduct, many=True)
        return Response(serializer.data)

    def post(self, request):
        data = request.data
        print(type(data))
        category_id = Category.objects.get(name=data['category_name']).id
        farmer_name = Farmer.objects.get(pk=data['farmer']).id
        new_data = {'category_name': data['category_name'],
                    'category': category_id,
                    'farmer': data['farmer'],
                    'farmer_name': farmer_name,
                    'name': data['name'],
                    'description': data['description'],
                    'price': data['price'],
                    'stock': data['stock']}
        serializer = ProductSerializer(data=new_data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        else:
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class ProductForCategory(APIView):
    """
    list products for a specific category
    """

    def get(self, request, category_pk, format=None):
        category = Category.objects.get(pk=category_pk)
        products = category.category_products
        serializer = ProductSerializer(products, many=True)
        return Response(serializer.data)


class ProductForFarmer(APIView):
    """
    list products for a specific farmer
    """

    def get(self, request, farmer_pk, format=None):
        farmer = Farmer.objects.get(pk=farmer_pk)
        products = farmer.farmer_products
        serializer = ProductSerializer(products, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

    def post(self, request, farmer_pk):
        data = request.data
        if '0' in data.keys():
            data_list = []
            for key in data:
                data_instance = data[key]
                category_id = Category.objects.get(name=data_instance['category_name']).id
                farmer_name = Farmer.objects.get(pk=farmer_pk).username
                new_data = {'category_name': data_instance['category_name'],
                            'category': category_id,
                            'farmer': farmer_pk,
                            'farmer_name': farmer_name,
                            'name': data_instance['name'],
                            'description': data_instance['description'],
                            'price': data_instance['price'],
                            'stock': data_instance['stock'],
                            'image': imageNotFoundString}
                data_list.append(new_data)
            serializer = ProductSerializer(data=data_list, many=True)
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data, status=status.HTTP_201_CREATED)
            else:
                return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        else:
            category_id = Category.objects.get(name=data['category_name']).id
            farmer_name = Farmer.objects.get(pk=farmer_pk).username
            new_data = {'category_name': data['category_name'],
                        'category': category_id,
                        'farmer': farmer_pk,
                        'farmer_name': farmer_name,
                        'name': data['name'],
                        'description': data['description'],
                        'price': data['price'],
                        'stock': data['stock'],
                        'image': data['image']}
            serializer = ProductSerializer(data=new_data)
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data, status=status.HTTP_201_CREATED)
            else:
                return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class ProductDetail(APIView):
    """
    Create, modify or delete a product
    """

    def get_object(self, pk):
        try:
            return Product.objects.get(pk=pk)
        except Product.DoesNotExist:
            raise Http404

    def get(self, request, pk, format=None):
        product = self.get_object(pk)
        serializer = ProductSerializer(product)
        return Response(serializer.data)

    def put(self, request, pk, format=None):
        product = self.get_object(pk)
        data = request.data
        category_id = Category.objects.get(name=data['category_name']).id
        farmer_id = Product.objects.get(pk=pk).farmer.id
        farmer_name = Farmer.objects.get(pk=farmer_id).username
        new_data = {'category_name': data['category_name'],
                    'category': category_id,
                    'farmer': farmer_id,
                    'farmer_name': farmer_name,
                    'name': data['name'],
                    'description': data['description'],
                    'price': data['price'],
                    'stock': data['stock'],
                    'image': data['image']}
        serializer = ProductSerializer(instance=product, data=new_data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, pk, format=None):
        product = self.get_object(pk)
        product.delete()
        info = {'info': 'product delete success'}
        return Response(info, status=status.HTTP_200_OK)


class CartForCustomer(APIView):
    """
    list all products in the customer's cart
    add a product to a cart
    """

    def get(self, request, customer_pk, format=None):
        customer = Customer.objects.get(pk=customer_pk)
        carts = customer.customer_carts.all()
        return_list = []
        rlist = []
        for cart in carts:
            product_id = cart.product
            product = Product.objects.get(pk=product_id)
            # data = {
            #     'quantity': cart.quantity,
            #     'product': product
            # }
            return_list.append(product)
            rlist.append(cart)
        serializer = ProductSerializer(return_list, many=True)
        serializer2 = CartSerializer(rlist, many=True)
        return Response(serializer.data + serializer2.data, status=status.HTTP_200_OK)

    def post(self, request, customer_pk):
        data = request.data
        print(data)
        customer = Customer.objects.get(pk=customer_pk)
        carts = customer.customer_carts.all()

        for cart in carts:
            print(cart)
            print(cart.product)
            print(str(cart.product) == str(data['product']))
            if str(cart.product) == str(data['product']):
                info = {'info': 'this product has been added to your cart. '
                                'If you want to change product, please go to your cart'}
                return Response(info, status=status.HTTP_406_NOT_ACCEPTABLE)
        new_data = {'customer': customer_pk,
                    'product': data['product'],
                    'quantity': data['quantity']}
        serializer = CartSerializer(data=new_data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        else:
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def put(self, request, customer_pk, format=None):
        data = request.data
        new_data = {'customer': customer_pk,
                    'product': data['product'],
                    'quantity': data['quantity']}
        serializer = CartSerializer(data=new_data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        else:
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class CartView(APIView):
    def delete(self, request, customer_pk, cart_pk, format=None):
        # customer = Customer.objects.get(pk=customer_pk)
        # carts = customer.customer_carts.all()
        # for cart in carts:
        #     if cart.product == data['product']:
        #         cart.delete()
        cart = Cart.objects.get(pk=cart_pk)
        cart.delete()
        info = {'info': 'delete success'}
        return Response(info, status=status.HTTP_200_OK)


class ProductSearch(APIView):
    """
    list products for a keyword and order by price
    """
    def get(self, request, keyword, format=None):
        if ' ' in keyword:
            keyword_list = keyword.split(' ')
            products = Product.objects.filter(
                Q(name__icontains=keyword_list[0]) | Q(description__icontains=keyword[0])).order_by('price')
            for k in keyword_list:
                products = products.filter(
                    Q(name__icontains=k) | Q(description__icontains=k)).order_by('price')
            if products.exists():
                serializer = ProductSerializer(products, many=True)
            else:
                info = {'Products matching the search criteria do not exist'}
                return Response(info, status=status.HTTP_404_NOT_FOUND)
        else:
            products = Product.objects.filter(Q(name__icontains=keyword) | Q(description__icontains=keyword)).order_by('price')
            if products.exists():
                serializer = ProductSerializer(products, many=True)
            else:
                info = {'Products matching the search criteria do not exist'}
                return Response(info, status=status.HTTP_404_NOT_FOUND)
        return Response(serializer.data)

